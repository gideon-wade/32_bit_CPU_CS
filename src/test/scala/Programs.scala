import chisel3._
import chisel3.util._
import chisel3.iotesters
import chisel3.iotesters.PeekPokeTester
import java.util

object Programs{
  val program1 = Array(
    ("b0010" +
      "0000000001" +
      "00000" +
      "0000000000000").U(32.W), //1. addi: R1 = R0 + 0
    ("b0010" +
      "0000000010" +
      "00000" +
      "0000000010100").U(32.W), //2. addi: R2 = R0 + 20

    //loop1

    ("b1000" +
      "0000000001" +
      "00010" +
      "0000000000101").U(32.W), //3. blt: R1 < R2 -> 5
    ("b1001" +
      "0000000000000000000000111000").U(32.W), //4. goto: 56
    ("b0010" +
      "0000000011" +
      "00000" +
      "0000000000000").U(32.W), //5. addi: R3 = R0 + 0
    ("b0010" +
      "0000000100" +
      "00000" +
      "0000000010100").U(32.W), //6. addi: R4 = R0 + 20

    //loop2

    ("b1000" +
      "0000000011" +
      "00100" +
      "0000000001001").U(32.W), //7. blt: R3 < R4 -> 9
    ("b1001" +
      "0000000000000000000000110110").U(32.W), //8. goto: 54
    ("b0001" +
      "0000000101" +
      "00011" +
      "00010" +
      "0000" +
      "0000").U(32.W), //9. mul: R5 = R3 * R2 (shiftA = NULL && func = NULL)
    ("b0000" +
      "0000000110" +
      "00001" +
      "00101" +
      "0000" +
      "0000").U(32.W), //10. add: R6 = R1 + R5 (shiftA = NULL && func = NULL)
    ("b0110" +
      "0000000001" +
      "00000" +
      "0000000010001").U(32.W), //11. beq: R1 == R0 -> 17
    ("b0110" +
      "0000000011" +
      "00000" +
      "0000000010011").U(32.W), //12. beq: R3 == R0 -> 19
    ("b0010" +
      "0000000111" +
      "00000" +
      "0000000010011").U(32.W), //13. addi: R7 = R0 + 19
    ("b0110" +
      "0000000001" +
      "00111" +
      "0000000010101").U(32.W), //14. beq: R1 == R7 -> 21
    ("b0110" +
      "0000000011" +
      "00111" +
      "0000000010111").U(32.W), //15. beq: R3 == R7 -> 23
    ("b1001" +
      "0000000000000000000000011001").U(32.W), //16. goto: 25

    //if1

    ("b0101" +
      "0000000110" +
      "00000" +
      "0000000000000").U(32.W), //17. store: mem[R6] = 0
    ("b1001" +
      "0000000000000000000000001100").U(32.W), //18. goto: 12

    //if2

    ("b0101" +
      "0000000110" +
      "00000" +
      "0000000000000").U(32.W), //19. store: mem[R6] = 0
    ("b1001" +
      "0000000000000000000000001111").U(32.W), //20. goto: 13

    //if3

    ("b0101" +
      "0000000110" +
      "00000" +
      "0000000000000").U(32.W), //21. store: mem[R6] = 0
    ("b1001" +
      "0000000000000000000000001101").U(32.W), //22. goto: 15

    //if4

    ("b0101" +
      "0000000110" +
      "00000" +
      "0000000000000").U(32.W), //23. store: mem[R6] = 0
    ("b1001" +
      "0000000000000000000000001110").U(32.W), //24. goto: 16

    //if5

    ("b0100" +
      "0000001000" +
      "00110" +
      "0000000000000").U(32.W), //25. load: R8 = mem[R6]
    ("b0111" +
      "0000001000" +
      "00000" +
      "0000000011101").U(32.W), //26. bneq: R8 != R0 -> 29
    ("b0101" +
      "0000001000" +
      "00000" +
      "0000000000000").U(32.W), //27. store: mem[R8] = 0
    ("b1001" +
      "0000000000000000000000110100").U(32.W), //28. goto: 52

    ////else1

    //cond1

    ("b0011" +
      "0000001001" +
      "00001" +
      "0000000000001").U(32.W), //29. subi: R9 = R1 - 1
    ("b0001" +
      "0000001010" +
      "01001" +
      "00101" +
      "0000" +
      "0000").U(32.W), //30. mul: R10 = R9 * R5 (shiftA = NULL /func = NULL)
    ("b0100" +
      "0000001011" +
      "01010" +
      "0000000000000").U(32.W), //31. load: R11 = mem[R10]
    ("b0110" +
      "0000001011" +
      "00000" +
      "0000000110001").U(32.W), //32. beq: R11 == R0 -> 49

    //cond2

    ("b0010" +
      "000001100" +
      "00001" +
      "00000000000001").U(32.W), //33. addi: R12 = R1 + 1
    ("b0001" +
      "0000001101" +
      "01100" +
      "00101" +
      "0000" +
      "0000").U(32.W), //34. mul: R13 = R12 * R5 (shiftA = NULL /func = NULL)
    ("b0100" +
      "0000001110" +
      "01101" +
      "0000000000000").U(32.W), //35. load: R14 = mem[R13]
    ("b0110" +
      "0000001110" +
      "00000" +
      "0000000110001").U(32.W), //36. beq: R14 == R0 -> 49

    //cond3

    ("b0011" +
      "000001111" +
      "00011" +
      "00000000000001").U(32.W), //37. subi: R15 = R3 - 1
    ("b0001" +
      "0000010000" +
      "01111" +
      "00100" +
      "0000" +
      "0000").U(32.W), //38. mul: R16 = R15 * R4 (shiftA = NULL /func = NULL)
    ("b0001" +
      "0000010001" +
      "00001" +
      "10000" +
      "0000" +
      "0000").U(32.W), //39. mul: R17 = R1 * R16 (shiftA = NULL /func = NULL)
    ("b0100" +
      "0000010010" +
      "10001" +
      "0000000000000").U(32.W), //40. load: R18 = mem[R17]
    ("b0110" +
      "0000010010" +
      "00000" +
      "0000000110001").U(32.W), //41. beq: R18 == R0 -> 49

    //cond4

    ("b0010" +
      "0000010011" +
      "00011" +
      "00000000000001").U(32.W), //42. addi: R19 = R3 + 1
    ("b0001" +
      "0000010100" +
      "10011" +
      "00100" +
      "0000" +
      "0000").U(32.W), //43. mul: R20 = R19 * R4 (shiftA = NULL /func = NULL)
    ("b0001" +
      "0000010101" +
      "00001" +
      "10100" +
      "0000" +
      "0000").U(32.W), //44. mul: R21 = R1 * R20 (shiftA = NULL /func = NULL)
    ("b0100" +
      "0000010110" +
      "10101" +
      "0000000000000").U(32.W), //45. load: R22 = mem[R21]
    ("b0110" +
      "0000010010" +
      "00000" +
      "0000000110001").U(32.W), //46. beq: R22 == R0 -> 49
    // \end cond4

    ("b1001" +
      "0000000000000000000000110010").U(32.W), //47. goto: 50
    ("b0101" +
      "0000000110" +
      "00000" +
      "0000000000000").U(32.W), //48. store: mem[R6] = 0
    ("b1001" +
      "0000000000000000000000110100").U(32.W), //49. goto: 52

    //else2

    ("b0010" +
      "0000010111" +
      "00000" +
      "00000011111111").U(32.W), //50. addi: R23 = R0 + 255
    ("b0101" +
      "0000000110" +
      "10111" +
      "0000000000000").U(32.W), //51. store: mem[R6] = R23
    // \end else2

    ("b0010" +
      "0000000011" +
      "00011" +
      "00000000000001").U(32.W), //52. addi: R3 = R3 + 1
    ("b1001" +
      "0000000000000000000000000111").U(32.W), //53. goto: 7
    ("b0010" +
      "0000000001" +
      "00001" +
      "00000000000001").U(32.W), //54. addi: R1 = R1 + 1
    ("b1001" +
      "0000000000000000000000000011").U(32.W), //55. goto: 3
    ("b1111" +
      "0000000000000000000000000000").U(32.W) //56. END
  )

  /*val program2 = Array(
    "h00000000".U(32.W),
    "h00000000".U(32.W),
    "h00000000".U(32.W),
    "h00000000".U(32.W),
    "h00000000".U(32.W),
    "h00000000".U(32.W),
    "h00000000".U(32.W),
    "h00000000".U(32.W),
    "h00000000".U(32.W),
    "h00000000".U(32.W),
    "h00000000".U(32.W),
    "h00000000".U(32.W)
  )*/
}